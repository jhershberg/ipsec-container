set -x

function write_vxlan_script {
    side=$1
    local_ip=$2
    remote_ip=$3
    local_overlay_ip=$4
    cat <<EOF |
ip link add name vxlan42 type vxlan id 42 dev eth0 remote $remote_ip local $local_ip dstport 4789
ip addr add $local_overlay_ip/24 dev vxlan42
ip link set up vxlan42
EOF
    tee $side/vxlan.sh
    chmod +x $side/vxlan.sh
}

function write_ipsec_conf {
    side=$1
    left_ip=$2
    right_ip=$3

    cat <<EOF | 
config setup
	virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v4:100.64.0.0/10,%v6:fd00::/8,%v6:fe80::/10
	protostack=netkey

conn mytunnel
    auto=add
    nat-ikev1-method=none
    authby=secret
    left=$left_ip
    right=$right_ip
    leftsubnet=0.0.0.0/0
    rightsubnet=0.0.0.0/0
    mark=5/0xffffffff
    vti-interface=vti01
    vti-routing=no
EOF
    tee $side/ipsec.conf
}

# INITIALIZE VARIABLES AND DIRECTORIES
source ./vars
rm -rf left right
mkdir left
mkdir right


# WRITE THE IPSEC FILES
pwd=$(pwgen -s 64 1) 
echo $left_overlay_ip $right_overlay_ip : PSK \"$pwd\" > left/ipsec.secrets
echo $left_overlay_ip $right_overlay_ip : PSK \"$pwd\" > right/ipsec.secrets

write_ipsec_conf left $left_overlay_ip $right_overlay_ip
write_ipsec_conf right $left_overlay_ip $right_overlay_ip

# WRITE VXLAN CREATION SCRIPT
write_vxlan_script left $left_local_ip $right_remote_ip $left_overlay_ip
write_vxlan_script right $right_local_ip $left_remote_ip $right_overlay_ip

# BUILD THE IMAGE
sudo docker build . -t tun

# CREATE A NETWORK
if [ "$(sudo docker network list | grep 'vpn-network')" = "" ]
then
    sudo docker network create --subnet=$network_range --ip-range=$network_pool --gateway=$network_gw vpn-network
fi
